#!/usr/python
'''
create Lakes.rvh
'''
import copy
import os
import numpy as np
import pandas as pd
#########################
def read_Lakes(fname):

    # fname=odir+"/"+expname+"_%02d/best/RavenInput/Lakes.rvh"%(ens_num)
    print (fname)
    reservoir_data = {
        'Reservoir': [],
        'SubBasinID': [],
        'HRUID': [],
        'Type': [],
        'WeirCoefficient': [],
        'CrestWidth': [],
        'MaxDepth': [],
        'LakeArea': [],
        'SeepageParameters1': [],
        'SeepageParameters2': []
    }

    current_reservoir = {}

    # try:
    with open(fname, 'r') as file:
        for line in file:
            line = line.strip()
            if line.startswith(':Reservoir'):
                current_reservoir = {}
                key, value = line.split(' ', 1)
                current_reservoir['Reservoir']=int(value.split('_')[1])
            elif line.startswith(':EndReservoir'):
                for key in reservoir_data.keys():
                    if key in current_reservoir:
                        reservoir_data[key].append(current_reservoir[key])
                    else:
                        reservoir_data[key].append(None)
            else:
                if ':' in line:
                    key, value = line.split(' ', 1)
                    if key[1::] == 'SeepageParameters':
                        current_reservoir['SeepageParameters1']=value.strip().split(' ')[1]
                        current_reservoir['SeepageParameters1']=value.strip().split(' ')[2]
                    else:
                        current_reservoir[key.strip()[1:]] = value.strip()
                    # print (key[1::], value.strip())

    # except FileNotFoundError:
    #     print(f"Error: File '{file_path}' not found.")
    df=pd.DataFrame(reservoir_data)
    df['Reservoir']      =df['Reservoir'].astype(int)
    df['WeirCoefficient']=df['WeirCoefficient'].astype(float)
    df['CrestWidth']     =df['CrestWidth'].astype(float)
    df['MaxDepth']       =df['MaxDepth'].astype(float)
    df['HyLakeId']       =df['Reservoir']

    return df
#########################
def AEcurve_string(slope,intercept,minWL,maxWL):
    '''
    AE curve
    '''
    string=['  :AreaStageRelation LOOKUP_TABLE']
    string.append('   '+str(len(np.arange(minWL,maxWL+1,0.1))))
    for WL in np.arange(minWL,maxWL+1,0.1):
        result = intercept + slope * WL
        # Format values to 2 decimal places
        string.append(f"   {WL:.2f}   {result:.2f}")
    string.append('  :EndAreaStageRelation')
    return string
#########################
def WriteStringToFile(Out_String, File_Path, WriteMethod):
    """Write String to a file

    Function that used to write Out_String to a file located at the File_Path.

    Parameters
    ----------
    Out_String            : string
        The string that will be writed to the file located at File_Path
    File_Path             : string
        Path and filename of file that will be modified or created
    WriteMethod           : {'a','w'}
        If WriteMethod = "w", a new file will be created at the File_Path
        If WriteMethod = "a", the Out_String will be added to exist file

    Notes
    ------
        The file located at the File_Path will be modified or created

    Returns
    -------
        None

    Examples
    --------
    >>> from WriteRavenInputs import WriteStringToFile
    >>> Out_String = 'sometest at line 1\n some test at line 2\n some test at line 3\n'
    >>> File_Path  = 'C:/Path_to_the_Flie_with_file_name'
    >>> WriteStringToFile(Out_String = Out_String,File_Path = File_Path,WriteMethod = 'w')

    """

    if os.path.exists(
        File_Path
    ):  ### if file exist, we can either modify or overwrite it
        with open(File_Path, WriteMethod) as f:
            f.write(Out_String)
    else:  ## create a new file anyway, since file did not exist
        with open(File_Path, "w") as f:
            f.write(Out_String)
#########################
def Generate_Raven_Lake_rvh_String(catinfo, Raveinputsfolder, Model_Name,lake_out_flow_method,AEcurve=True):
    """Generate string of raven lake rvh input

    Function that used to generate the content for
    Raven lake definition Model_Name_Lake.rvh input file.

    Parameters
    ----------
    catinfo              : DataFrame
        A dataframe includes all attribute for each HRU
        read from polygon shpfile generated by the toolbox
    Raveinputsfolder     : string
        Folder path and name that save outputs

    Notes
    ------
    None

    See Also
    --------
    None

    Returns
    -------
    Lake_rvh_string       : string
        It is the string that contains the content that will be used to
        to define lake parameters for all lakes in
        Raven lake rvh input file format.
        ** New routine write the hypsometric curve
    Lake_rvh_file_path    : string
        It is the string that define the path of
        the raven channel rvp input file.

    Examples
    --------
    >>> from WriteRavenInputs import Generate_Raven_Lake_rvh_String
    >>> outFolderraven    = 'c:/path_to_the_raven_input_folder/'
    >>> DataFolder = "C:/Path_to_foldr_of_example_dataset_provided_in_Github_wiki/"
    >>> Model_Folder     = os.path.join(DataFolder,'Model')
    >>> Raveinputsfolder = os.path.join(Model_Folder,'RavenInput')
    >>> finalcatchpath = os.path.join(DataFolder,'finalcat_hru_info.shp')
    >>> tempinfo = Dbf5(finalcatchpath[:-3] + "dbf")
    >>> ncatinfo = tempinfo.to_dataframe()
    >>> Model_Name = 'test'
    >>> ncatinfo2 = ncatinfo.drop_duplicates('HRU_ID', keep='first')
    >>> Lake_rvh_string, Lake_rvh_file_path= Generate_Raven_Lake_rvh_String(ncatinfo2,Raveinputsfolder,lenThres,Model_Name)

    """
    Lake_rvh_file_path = os.path.join(Raveinputsfolder, "Lakes_obs.rvh")
    Lake_rvh_string_list = []
    tab = "       "
    Lake_rvh_string_list.append("#----------------------------------------------")
    Lake_rvh_string_list.append("# This is a Raven lake rvh file generated")
    Lake_rvh_string_list.append("# by BasinMaker v2.0")
    Lake_rvh_string_list.append("# Updated by Menaka using hypsometric curve")
    Lake_rvh_string_list.append("#----------------------------------------------")

    Gauge_col_Name = "Has_POI"
    if "Has_POI" not in catinfo.columns:
        Gauge_col_Name = "Has_Gauge"

    for i in range(0, len(catinfo.index)):
        if catinfo.iloc[i]["HRU_IsLake"] > 0:  ## lake hru
            lakeid = int(catinfo.iloc[i]["HyLakeId"])
            catid = catinfo.iloc[i]["SubId"]
            A = catinfo.iloc[i]["HRU_Area"]  ### in meters
            h0 = catinfo.iloc[i]["LakeDepth"]  ## m
            WeirCoe = 0.6
            hruid = int(catinfo.iloc[i]["HRU_ID"])
            Crewd = catinfo.iloc[i]["CrestWidth"]  ##3 m
            has_obs = catinfo.iloc[i][Gauge_col_Name]  ##3 m
            #            if slakeinfo.iloc[0]['Wshd_area'] < 6000 and slakeinfo.iloc[0]['Wshd_area'] > 0:
            if has_obs < 1 or lake_out_flow_method == 'broad_crest':
                Lake_rvh_string_list.append(
                    "#############################################"
                )  # f2.write("#############################################"+"\n")
                Lake_rvh_string_list.append(
                    "# New Lake starts"
                )  # f2.write("###New Lake starts"+"\n")
                Lake_rvh_string_list.append(
                    "#############################################"
                )  # f2.write("#############################################"+"\n")
                ######write lake information to file
                Lake_rvh_string_list.append(
                    ":Reservoir" + "   Lake_" + str(int(lakeid))
                )  # f2.write(":Reservoir"+ "   Lake_"+ str(int(lakeid))+ "   ######## " +"\n")
                Lake_rvh_string_list.append(
                    "  :SubBasinID  " + str(int(catid))
                )  # f2.write("  :SubBasinID  "+str(int(catid))+ "\n")
                Lake_rvh_string_list.append(
                    "  :HRUID   " + str(int(hruid))
                )  # f2.write("  :HRUID   "+str(int(hruid))+ "\n")
                Lake_rvh_string_list.append(
                    "  :Type RESROUTE_STANDARD   "
                )  # f2.write("  :Type RESROUTE_STANDARD   "+"\n")
                Lake_rvh_string_list.append(
                    "  :WeirCoefficient  " + str(WeirCoe)
                )  # f2.write("  :WeirCoefficient  "+str(WeirCoe)+ "\n")
                Lake_rvh_string_list.append(
                    "  :CrestWidth " + '{:>10.4f}'.format(Crewd) #"{:.4f}".format(Crewd) #str(Crewd)
                )  # f2.write("  :CrestWidth "+str(Crewd)+ "\n")
                Lake_rvh_string_list.append(
                    "  :MaxDepth " + str(h0)
                )  # f2.write("  :MaxDepth "+str(h0)+ "\n")
                Lake_rvh_string_list.append(
                    "  :LakeArea    " + str(A)
                )  # f2.write("  :LakeArea    "+str(A)+ "\n")

                Lake_rvh_string_list.append(
                    "  :SeepageParameters   0   0 "
                )  # f2.write("  :LakeArea    "+str(A)+ "\n")

                if AEcurve:
                    Lake_rvh_string_list.extend(
                        AEcurve_string(catinfo.iloc[i]['slope'],
                        catinfo.iloc[i]['intercept'],
                        catinfo.iloc[i]['minWL'],
                        catinfo.iloc[i]['maxWL'])
                    )

                Lake_rvh_string_list.append(
                    ":EndReservoir   "
                )  # f2.write(":EndReservoir   "+"\n")
            elif has_obs >= 1 and lake_out_flow_method == 'power_law':
                Lake_rvh_string_list.append(
                    "#############################################"
                )  # f2.write("#############################################"+"\n")
                Lake_rvh_string_list.append(
                    "# New Lake starts"
                )  # f2.write("###New Lake starts"+"\n")
                Lake_rvh_string_list.append(
                    "#############################################"
                )  # f2.write("#############################################"+"\n")
                ######write lake information to file
                Lake_rvh_string_list.append(
                    ":Reservoir" + "   Lake_" + str(int(lakeid))
                )  # f2.write(":Reservoir"+ "   Lake_"+ str(int(lakeid))+ "   ######## " +"\n")
                Lake_rvh_string_list.append(
                    "  :SubBasinID  " + str(int(catid))
                )  # f2.write("  :SubBasinID  "+str(int(catid))+ "\n")
                Lake_rvh_string_list.append(
                    "  :HRUID   " + str(int(hruid))
                )  # f2.write("  :HRUID   "+str(int(hruid))+ "\n")
                Lake_rvh_string_list.append(
                    "  :Type RESROUTE_STANDARD   "
                )  # f2.write("  :Type RESROUTE_STANDARD   "+"\n")
                Lake_rvh_string_list.append(
                    "  :MaxDepth " + str(h0)
                )  # f2.write("  :MaxDepth "+str(h0)+ "\n")
                Lake_rvh_string_list.append(
                    "  :SeepageParameters   0   0 "
                )  # f2.write("  :LakeArea    "+str(A)+ "\n")

                Lake_rvh_string_list.append(
                    "  :OutflowStageRelation POWER_LAW "
                )

                Lake_rvh_string_list.append(
                    "  %s   %s " %(str(Crewd*2/3*(9.80616**(0.5))),str(1.5))
                )

                Lake_rvh_string_list.append(
                    "  :EndOutflowStageRelation "
                )


                Lake_rvh_string_list.append(
                    "  :VolumeStageRelation POWER_LAW "
                )

                Lake_rvh_string_list.append(
                    "  %s   %s " %(str(A),str(1))
                )

                Lake_rvh_string_list.append(
                    "  :EndVolumeStageRelation "
                )


                Lake_rvh_string_list.append(
                    "  :AreaStageRelation POWER_LAW "
                )

                Lake_rvh_string_list.append(
                    "  %s   %s " %(str(A),str(0))
                )

                Lake_rvh_string_list.append(
                    "  :EndAreaStageRelation "
                )


                Lake_rvh_string_list.append(
                    ":EndReservoir   "
                )  # f2.write(":EndReservoir   "+"\n")

    Lake_rvh_string = "\n".join(Lake_rvh_string_list)
    return Lake_rvh_string, Lake_rvh_file_path
    #### write lake input files for different lake zone


#########################
# read final cat 
final_cat=pd.read_csv("./out/finalcat_hru_info_updated_AEcurve.csv")

# read Lakes.rvh
Lakes_rvh=read_Lakes('/home/menaka/scratch/LakeCalibration/out/E0b_obs/best_Raven/RavenInput/Lakes.rvh')

# merge
final_cat=pd.merge(final_cat[final_cat["HRU_IsLake"]>0],Lakes_rvh,on='HyLakeId',how='inner',suffixes=('_org', '_Lakes'))

Lake_rvh_string, Lake_rvh_file_path = Generate_Raven_Lake_rvh_String(
    final_cat, './out', 'test','broad_crest'
)

WriteStringToFile(Lake_rvh_string, Lake_rvh_file_path, "w")